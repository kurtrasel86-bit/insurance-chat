#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –ø–æ –Ω–∞–≤–µ–¥–µ–Ω–∏—é –ø–æ—Ä—è–¥–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
 */

const fs = require('fs');
const path = require('path');

const API_BASE = 'http://localhost:3000';

// –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
const OBSOLETE_KEYWORDS = [
  '—É—Å—Ç–∞—Ä–µ–ª–æ', '–Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç', '–∑–∞–º–µ–Ω–µ–Ω–æ', '–æ—Ç–º–µ–Ω–µ–Ω–æ', '–Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ',
  '–≤—ã–ø—É—â–µ–Ω –Ω–æ–≤—ã–π', '–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è', '–æ–±–Ω–æ–≤–ª–µ–Ω–æ', '–∏–∑–º–µ–Ω–µ–Ω–æ'
];

const DELETE_KEYWORDS = [
  '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ',
  '—Å–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª'
];

const INSURANCE_KEYWORDS = [
  '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '—Å—Ç—Ä–∞—Ö–æ–≤–æ–π', '–ø–æ–ª–∏—Å', '—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞', '—Ä–∏—Å–∫',
  '–ø–æ–∫—Ä—ã—Ç–∏–µ', '–≤—ã–ø–ª–∞—Ç–∞', '–ø—Ä–µ–º–∏—è', '—Ç–∞—Ä–∏—Ñ', '—É—Å–ª–æ–≤–∏—è'
];

async function fetchDocuments() {
  try {
    const response = await fetch(`${API_BASE}/kb/documents`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error.message);
    return [];
  }
}

async function fetchDocumentContent(docId) {
  try {
    const response = await fetch(`${API_BASE}/kb/documents/${docId}`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return await response.text();
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${docId}:`, error.message);
    return '';
  }
}

function analyzeDocument(doc, content) {
  const analysis = {
    id: doc.id,
    title: doc.title,
    companyCode: doc.companyCode,
    productCode: doc.productCode,
    isApproved: doc.isApproved,
    isObsolete: doc.isObsolete,
    actions: [],
    issues: []
  };

  const contentLower = content.toLowerCase();
  const titleLower = doc.title.toLowerCase();

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö)
  const hasObsoleteKeywords = OBSOLETE_KEYWORDS.some(keyword => 
    contentLower.includes(keyword) || titleLower.includes(keyword)
  );
  
  if (hasObsoleteKeywords && !doc.isObsolete) {
    analysis.actions.push('mark_obsolete');
    analysis.issues.push('–°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏');
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
  const hasDeleteKeywords = DELETE_KEYWORDS.some(keyword => 
    contentLower.includes(keyword) || titleLower.includes(keyword)
  );
  
  const isNotInsurance = !INSURANCE_KEYWORDS.some(keyword => 
    contentLower.includes(keyword) || titleLower.includes(keyword)
  );
  
  const isTooShort = content.length < 100;
  
  if (hasDeleteKeywords || (isNotInsurance && isTooShort)) {
    analysis.actions.push('delete');
    analysis.issues.push('–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞');
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
  const companyMismatch = checkCompanyMismatch(doc.companyCode, content);
  if (companyMismatch) {
    analysis.actions.push('fix_company');
    analysis.issues.push(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è: ${doc.companyCode} -> ${companyMismatch}`);
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
  const productMismatch = checkProductMismatch(doc.productCode, content);
  if (productMismatch) {
    analysis.actions.push('fix_product');
    analysis.issues.push(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç: ${doc.productCode} -> ${productMismatch}`);
  }

  return analysis;
}

function checkCompanyMismatch(companyCode, content) {
  const contentLower = content.toLowerCase();
  
  // –°–ª–æ–≤–∞—Ä—å –∫–æ–º–ø–∞–Ω–∏–π –∏ –∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  const companyKeywords = {
    'SOGAZ': ['—Å–æ–≥–∞–∑', '—Å–æ–≥–∞–∑-–º–µ–¥', '—Å–æ–≥–∞–∑-–∂–∏–∑–Ω—å'],
    'INGOSSTRAKH': ['–∏–Ω–≥–æ—Å—Å—Ç—Ä–∞—Ö', '–∏–Ω–≥–æ—Å—Å—Ç—Ä–∞—Ö-–º'],
    'RESO': ['—Ä–µ—Å–æ', '—Ä–µ—Å–æ-–≥–∞—Ä–∞–Ω—Ç–∏—è'],
    'VSK': ['–≤—Å–∫', '–≤–æ–µ–Ω–Ω–æ-—Å—Ç—Ä–∞—Ö–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è'],
    'ROSGOSSTRAKH': ['—Ä–æ—Å–≥–æ—Å—Å—Ç—Ä–∞—Ö', '—Ä–≥—Å']
  };

  // –ù–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–µ
  for (const [code, keywords] of Object.entries(companyKeywords)) {
    if (code !== companyCode) {
      const hasKeywords = keywords.some(keyword => contentLower.includes(keyword));
      if (hasKeywords) {
        return code;
      }
    }
  }

  return null;
}

function checkProductMismatch(productCode, content) {
  const contentLower = content.toLowerCase();
  
  // –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  const productKeywords = {
    'AUTO': ['–∞–≤—Ç–æ', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–º–∞—à–∏–Ω–∞', '–æ—Å–∞–≥–æ', '–∫–∞—Å–∫–æ', '–∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ'],
    'PROPERTY': ['–∏–º—É—â–µ—Å—Ç–≤–æ', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–¥–æ–º', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ'],
    'HEALTH': ['–∑–¥–æ—Ä–æ–≤—å–µ', '–º–µ–¥–∏—Ü–∏–Ω–∞', '–¥–º—Å', '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ', '–∑–¥–æ—Ä–æ–≤—å–µ'],
    'LIFE': ['–∂–∏–∑–Ω—å', '–∂–∏–∑–Ω–µ–Ω–Ω–æ–µ', '–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–µ'],
    'TRAVEL': ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '—Ç—É—Ä–∏–∑–º', '–≤—ã–µ–∑–¥', '–∑–∞–≥—Ä–∞–Ω–∏—Ü–∞', '—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ'],
    'ACCIDENT': ['–Ω–µ—Å—á–∞—Å—Ç–Ω—ã–π —Å–ª—É—á–∞–π', '–Ω—Å', '—Ç—Ä–∞–≤–º–∞', '—É—â–µ—Ä–± –∑–¥–æ—Ä–æ–≤—å—é']
  };

  // –ù–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
  for (const [code, keywords] of Object.entries(productKeywords)) {
    if (code !== productCode) {
      const hasKeywords = keywords.some(keyword => contentLower.includes(keyword));
      if (hasKeywords) {
        return code;
      }
    }
  }

  return null;
}

async function main() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...\n');

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
  console.log('üìÑ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
  const documents = await fetchDocuments();
  console.log(`–ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${documents.length}\n`);

  if (documents.length === 0) {
    console.log('‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
  console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã...');
  const analyses = [];
  
  for (let i = 0; i < documents.length; i++) {
    const doc = documents[i];
    console.log(`[${i + 1}/${documents.length}] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: ${doc.title}`);
    
    const content = await fetchDocumentContent(doc.id);
    const analysis = analyzeDocument(doc, content);
    analyses.push(analysis);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const toMarkObsolete = analyses.filter(a => a.actions.includes('mark_obsolete'));
  const toDelete = analyses.filter(a => a.actions.includes('delete'));
  const toFixCompany = analyses.filter(a => a.actions.includes('fix_company'));
  const toFixProduct = analyses.filter(a => a.actions.includes('fix_product'));

  // –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
  console.log('='.repeat(50));
  console.log(`üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${documents.length}`);
  console.log(`üî¥ –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ obsolete: ${toMarkObsolete.length}`);
  console.log(`üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å: ${toDelete.length}`);
  console.log(`üè¢ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é: ${toFixCompany.length}`);
  console.log(`üì¶ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç: ${toFixProduct.length}`);

  // –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  if (toMarkObsolete.length > 0) {
    console.log('\nüî¥ –î–û–ö–£–ú–ï–ù–¢–´ –î–õ–Ø –ü–û–ú–ï–¢–ö–ò –ö–ê–ö OBSOLETE:');
    toMarkObsolete.forEach(a => {
      console.log(`- ${a.title} (${a.companyCode}/${a.productCode})`);
      console.log(`  –ü—Ä–æ–±–ª–µ–º—ã: ${a.issues.join(', ')}`);
    });
  }

  if (toDelete.length > 0) {
    console.log('\nüóëÔ∏è  –î–û–ö–£–ú–ï–ù–¢–´ –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø:');
    toDelete.forEach(a => {
      console.log(`- ${a.title} (${a.companyCode}/${a.productCode})`);
      console.log(`  –ü—Ä–æ–±–ª–µ–º—ã: ${a.issues.join(', ')}`);
    });
  }

  if (toFixCompany.length > 0) {
    console.log('\nüè¢ –î–û–ö–£–ú–ï–ù–¢–´ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ú–ü–ê–ù–ò–ò:');
    toFixCompany.forEach(a => {
      console.log(`- ${a.title} (${a.companyCode} -> ${a.issues[0].split('-> ')[1]})`);
    });
  }

  if (toFixProduct.length > 0) {
    console.log('\nüì¶ –î–û–ö–£–ú–ï–ù–¢–´ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–î–£–ö–¢–ê:');
    toFixProduct.forEach(a => {
      console.log(`- ${a.title} (${a.productCode} -> ${a.issues[0].split('-> ')[1]})`);
    });
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
  const report = {
    timestamp: new Date().toISOString(),
    totalDocuments: documents.length,
    toMarkObsolete: toMarkObsolete.map(a => ({ id: a.id, title: a.title, issues: a.issues })),
    toDelete: toDelete.map(a => ({ id: a.id, title: a.title, issues: a.issues })),
    toFixCompany: toFixCompany.map(a => ({ id: a.id, title: a.title, issues: a.issues })),
    toFixProduct: toFixProduct.map(a => ({ id: a.id, title: a.title, issues: a.issues }))
  };

  fs.writeFileSync('kb-analysis-report.json', JSON.stringify(report, null, 2));
  console.log('\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: kb-analysis-report.json');

  console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

main().catch(console.error);
