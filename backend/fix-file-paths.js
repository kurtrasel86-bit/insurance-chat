// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function fixFilePaths() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å fileUrl
    const docs = await prisma.kBDoc.findMany({
      where: {
        fileUrl: { not: null }
      }
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ñ–∞–π–ª–∞–º–∏: ${docs.length}`);

    for (const doc of docs) {
      if (doc.fileUrl) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        const filename = doc.fileUrl.split('/').pop();
        
        // –ù–æ–≤—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
        const newPath = `/admin/files/download/${filename}`;
        
        if (doc.fileUrl !== newPath) {
          console.log(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${doc.fileUrl} ‚Üí ${newPath}`);
          
          await prisma.kBDoc.update({
            where: { id: doc.id },
            data: { fileUrl: newPath }
          });
        }
      }
    }

    console.log('‚úÖ –ü—É—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixFilePaths();

