const fetch = require('node-fetch');

async function testSearch() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...\n');
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
    console.log('–¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ "—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ"');
    const response1 = await fetch('http://localhost:3000/kb/search', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        query: '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ',
        limit: 3
      })
    });
    
    if (response1.ok) {
      const results1 = await response1.json();
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results1.length}`);
      results1.forEach((r, i) => {
        console.log(`  ${i + 1}. ${r.docTitle} (${r.companyCode}/${r.productCode}) - ${r.score.toFixed(3)}`);
        console.log(`     ${r.text.substring(0, 100)}...`);
      });
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${response1.status} - ${await response1.text()}`);
    }
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏
    console.log('–¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ "–û–°–ê–ì–û" –≤ –∫–æ–º–ø–∞–Ω–∏–∏ RESO');
    const response2 = await fetch('http://localhost:3000/kb/search', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        query: '–û–°–ê–ì–û',
        companyCode: 'RESO',
        limit: 3
      })
    });
    
    if (response2.ok) {
      const results2 = await response2.json();
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results2.length}`);
      results2.forEach((r, i) => {
        console.log(`  ${i + 1}. ${r.docTitle} (${r.companyCode}/${r.productCode}) - ${r.score.toFixed(3)}`);
        console.log(`     ${r.text.substring(0, 100)}...`);
      });
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${response2.status} - ${await response2.text()}`);
    }
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('–¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π');
    const response3 = await fetch('http://localhost:3000/kb/stats');
    
    if (response3.ok) {
      const stats = await response3.json();
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
      console.log(`  –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${stats.totalDocuments}`);
      console.log(`  –ß–∞–Ω–∫–æ–≤: ${stats.totalChunks}`);
      console.log(`  –ö–æ–º–ø–∞–Ω–∏–π: ${stats.companies.length}`);
      console.log(`  –ü—Ä–æ–¥—É–∫—Ç–æ–≤: ${stats.products.length}`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${response3.status} - ${await response3.text()}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testSearch();
