const { PrismaClient } = require('@prisma/client');

async function checkDatabase() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const docCount = await prisma.kBDoc.count();
    console.log(`üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: ${docCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞–Ω–∫–∏
    const chunkCount = await prisma.kBChunk.count();
    console.log(`üß© –ß–∞–Ω–∫–æ–≤ –≤ –±–∞–∑–µ: ${chunkCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const approvedCount = await prisma.kBDoc.count({
      where: { isApproved: true }
    });
    console.log(`‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${approvedCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const obsoleteCount = await prisma.kBDoc.count({
      where: { isObsolete: true }
    });
    console.log(`‚ùå –ù–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${obsoleteCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
    const companies = await prisma.kBDoc.findMany({
      select: { companyCode: true },
      distinct: ['companyCode']
    });
    console.log(`üè¢ –ö–æ–º–ø–∞–Ω–∏–π: ${companies.length}`);
    companies.forEach(c => console.log(`  - ${c.companyCode}`));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    const products = await prisma.kBDoc.findMany({
      select: { productCode: true },
      distinct: ['productCode']
    });
    console.log(`üì¶ –ü—Ä–æ–¥—É–∫—Ç–æ–≤: ${products.length}`);
    products.forEach(p => console.log(`  - ${p.productCode}`));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞–Ω–∫–æ–≤
    const sampleChunks = await prisma.kBChunk.findMany({
      take: 3,
      include: { doc: true }
    });
    
    console.log('\nüìù –ü—Ä–∏–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤:');
    sampleChunks.forEach((chunk, i) => {
      console.log(`${i + 1}. –î–æ–∫—É–º–µ–Ω—Ç: ${chunk.doc.title}`);
      console.log(`   –ö–æ–º–ø–∞–Ω–∏—è: ${chunk.doc.companyCode}, –ü—Ä–æ–¥—É–∫—Ç: ${chunk.doc.productCode}`);
      console.log(`   –¢–µ–∫—Å—Ç: ${chunk.text.substring(0, 100)}...`);
      console.log('');
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkDatabase();
