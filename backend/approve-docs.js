const { PrismaClient } = require('@prisma/client');

async function approveDocuments() {
  const prisma = new PrismaClient();
  
  try {
    console.log('‚úÖ –û–¥–æ–±—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞...\n');
    
    // –û–¥–æ–±—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 50 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    const companies = ['RESO', 'VSK', 'SOGAZ'];
    
    for (const company of companies) {
      console.log(`–û–¥–æ–±—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ ${company}...`);
      
      const docs = await prisma.kBDoc.findMany({
        where: {
          companyCode: company,
          isApproved: false,
          isObsolete: false
        },
        take: 50,
        select: { id: true, title: true }
      });
      
      if (docs.length > 0) {
        await prisma.kBDoc.updateMany({
          where: {
            id: { in: docs.map(d => d.id) }
          },
          data: {
            isApproved: true,
            approvedAt: new Date(),
            approvedBy: 'admin'
          }
        });
        
        console.log(`  ‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ ${docs.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
        console.log(`  –ü—Ä–∏–º–µ—Ä—ã: ${docs.slice(0, 3).map(d => d.title).join(', ')}`);
      } else {
        console.log(`  ‚ö†Ô∏è –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const totalApproved = await prisma.kBDoc.count({
      where: { isApproved: true }
    });
    
    const totalChunks = await prisma.kBChunk.count({
      where: {
        doc: {
          isApproved: true,
          isObsolete: false
        }
      }
    });
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
    console.log(`  –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${totalApproved}`);
    console.log(`  –ß–∞–Ω–∫–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞: ${totalChunks}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

approveDocuments();
