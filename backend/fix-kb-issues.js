#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥—ã –∫–æ–º–ø–∞–Ω–∏–π –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
 */

const fs = require('fs');
const path = require('path');

const API_BASE = 'http://localhost:3000';

// –ú–∞–ø–ø–∏–Ω–≥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
const COMPANY_FIXES = {
  'RESOGARANTIA': 'RESO'
};

const PRODUCT_FIXES = {
  'OSAGO': 'AUTO',
  'KASKO': 'AUTO'
};

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
let analysisReport = null;
try {
  const reportData = fs.readFileSync('kb-analysis-report.json', 'utf8');
  analysisReport = JSON.parse(reportData);
  console.log('üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞:', analysisReport.timestamp);
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
  process.exit(1);
}

async function updateDocument(docId, updates) {
  try {
    const response = await fetch(`${API_BASE}/kb/documents/${docId}/update`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updates)
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP error! status: ${response.status}, body: ${errorText}`);
    }

    return await response.json();
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${docId}:`, error.message);
    return null;
  }
}

async function fixCompanyCodes() {
  console.log('\nüè¢ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥—ã –∫–æ–º–ø–∞–Ω–∏–π...');
  
  const companyFixes = analysisReport.toFixCompany || [];
  let successCount = 0;
  let errorCount = 0;

  for (const fix of companyFixes) {
    const newCompanyCode = fix.issues[0].split('-> ')[1];
    console.log(`[${successCount + errorCount + 1}/${companyFixes.length}] –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: ${fix.title} (${fix.id}) -> ${newCompanyCode}`);
    
    const result = await updateDocument(fix.id, {
      companyCode: newCompanyCode
    });

    if (result) {
      successCount++;
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: ${fix.title}`);
    } else {
      errorCount++;
      console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${fix.title}`);
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }

  console.log(`\nüè¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π:`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
  
  return { successCount, errorCount };
}

async function fixProductCodes() {
  console.log('\nüì¶ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
  
  const productFixes = analysisReport.toFixProduct || [];
  let successCount = 0;
  let errorCount = 0;

  for (const fix of productFixes) {
    const newProductCode = fix.issues[0].split('-> ')[1];
    console.log(`[${successCount + errorCount + 1}/${productFixes.length}] –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: ${fix.title} (${fix.id}) -> ${newProductCode}`);
    
    const result = await updateDocument(fix.id, {
      productCode: newProductCode
    });

    if (result) {
      successCount++;
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: ${fix.title}`);
    } else {
      errorCount++;
      console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${fix.title}`);
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }

  console.log(`\nüì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤:`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
  
  return { successCount, errorCount };
}

async function markDocumentsAsObsolete() {
  console.log('\nüî¥ –ü–æ–º–µ—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞–∫ obsolete...');
  
  const obsoleteDocs = analysisReport.toMarkObsolete || [];
  let successCount = 0;
  let errorCount = 0;

  for (const doc of obsoleteDocs) {
    console.log(`[${successCount + errorCount + 1}/${obsoleteDocs.length}] –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ obsolete: ${doc.title} (${doc.id})`);
    
    const result = await updateDocument(doc.id, {
      isObsolete: true,
      obsoleteReason: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞'
    });

    if (result) {
      successCount++;
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω: ${doc.title}`);
    } else {
      errorCount++;
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏: ${doc.title}`);
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }

  console.log(`\nüî¥ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–º–µ—Ç–∫–∏ –∫–∞–∫ obsolete:`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
  
  return { successCount, errorCount };
}

async function deleteDocuments() {
  console.log('\nüóëÔ∏è –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã...');
  
  const deleteDocs = analysisReport.toDelete || [];
  let successCount = 0;
  let errorCount = 0;

  for (const doc of deleteDocs) {
    console.log(`[${successCount + errorCount + 1}/${deleteDocs.length}] –£–¥–∞–ª—è–µ–º: ${doc.title} (${doc.id})`);
    
    try {
      const response = await fetch(`${API_BASE}/kb/documents/${doc.id}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        successCount++;
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω: ${doc.title}`);
      } else {
        const errorText = await response.text();
        console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${doc.title} - ${response.status}: ${errorText}`);
        errorCount++;
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${doc.title} - ${error.message}`);
      errorCount++;
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }

  console.log(`\nüóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è:`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
  
  return { successCount, errorCount };
}

async function main() {
  console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...\n');

  const results = {
    companyFixes: { successCount: 0, errorCount: 0 },
    productFixes: { successCount: 0, errorCount: 0 },
    obsoleteMarks: { successCount: 0, errorCount: 0 },
    deletions: { successCount: 0, errorCount: 0 }
  };

  // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥—ã –∫–æ–º–ø–∞–Ω–∏–π
  if (analysisReport.toFixCompany && analysisReport.toFixCompany.length > 0) {
    results.companyFixes = await fixCompanyCodes();
  } else {
    console.log('üè¢ –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π');
  }

  // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  if (analysisReport.toFixProduct && analysisReport.toFixProduct.length > 0) {
    results.productFixes = await fixProductCodes();
  } else {
    console.log('üì¶ –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
  }

  // 3. –ü–æ–º–µ—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞–∫ obsolete
  if (analysisReport.toMarkObsolete && analysisReport.toMarkObsolete.length > 0) {
    results.obsoleteMarks = await markDocumentsAsObsolete();
  } else {
    console.log('üî¥ –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –∫–∞–∫ obsolete');
  }

  // 4. –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
  if (analysisReport.toDelete && analysisReport.toDelete.length > 0) {
    results.deletions = await deleteDocuments();
  } else {
    console.log('üóëÔ∏è –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:');
  console.log('='.repeat(50));
  console.log(`üè¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–¥–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π: ${results.companyFixes.successCount} (–æ—à–∏–±–æ–∫: ${results.companyFixes.errorCount})`);
  console.log(`üì¶ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–¥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${results.productFixes.successCount} (–æ—à–∏–±–æ–∫: ${results.productFixes.errorCount})`);
  console.log(`üî¥ –ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ obsolete: ${results.obsoleteMarks.successCount} (–æ—à–∏–±–æ–∫: ${results.obsoleteMarks.errorCount})`);
  console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${results.deletions.successCount} (–æ—à–∏–±–æ–∫: ${results.deletions.errorCount})`);

  const totalSuccess = results.companyFixes.successCount + results.productFixes.successCount + 
                     results.obsoleteMarks.successCount + results.deletions.successCount;
  const totalErrors = results.companyFixes.errorCount + results.productFixes.errorCount + 
                     results.obsoleteMarks.errorCount + results.deletions.errorCount;

  console.log(`\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:`);
  console.log(`‚úÖ –í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${totalSuccess}`);
  console.log(`‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${totalErrors}`);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
  const fixReport = {
    timestamp: new Date().toISOString(),
    originalAnalysis: analysisReport.timestamp,
    results: results,
    totalSuccess,
    totalErrors
  };

  fs.writeFileSync('kb-fix-report.json', JSON.stringify(fixReport, null, 2));
  console.log('\nüíæ –û—Ç—á–µ—Ç –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: kb-fix-report.json');

  console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
}

main().catch(console.error);
