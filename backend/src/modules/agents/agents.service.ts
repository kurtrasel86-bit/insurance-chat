import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { ChatService } from '../chat/chat.service';

export interface AgentNotification {
  id: string;
  sessionId: string;
  channel: string;
  channelUserId: string;
  reason?: string;
  createdAt: Date;
  status: 'pending' | 'accepted' | 'rejected' | 'expired';
  acceptedBy?: string;
}

export interface AgentStatus {
  id: string;
  name: string;
  login: string;
  status: 'online' | 'offline' | 'busy';
  companies: string[];
  currentSessions: number;
  maxSessions: number;
}

@Injectable()
export class AgentsService {
  private readonly logger = new Logger(AgentsService.name);
  private pendingRequests = new Map<string, AgentNotification>();

  constructor(
    private readonly prisma: PrismaService,
    private readonly chatService: ChatService,
  ) {}

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
   */
  async getAvailableAgents(): Promise<AgentStatus[]> {
    const agents = await this.prisma.agent.findMany({
      where: {
        status: 'online',
      },
    });

    return agents.map(agent => ({
      id: agent.id,
      name: agent.name,
      login: agent.login,
      status: agent.status as 'online' | 'offline' | 'busy',
      companies: agent.companies.split(',').map(c => c.trim()),
      currentSessions: 0, // TODO: –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
      maxSessions: 5, // TODO: —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
    }));
  }

  /**
   * –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∫ —á–∞—Ç—É
   */
  async requestAgent(params: {
    sessionId: string;
    channel: string;
    channelUserId: string;
    reason?: string;
  }): Promise<{ success: boolean; requestId: string; message: string }> {
    const { sessionId, channel, channelUserId, reason } = params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
    const existingRequest = Array.from(this.pendingRequests.values())
      .find(req => req.sessionId === sessionId && req.status === 'pending');

    if (existingRequest) {
      return {
        success: false,
        requestId: existingRequest.id,
        message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...',
      };
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    const availableAgents = await this.getAvailableAgents();
    
    if (availableAgents.length === 0) {
      return {
        success: false,
        requestId: '',
        message: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É.',
      };
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
    const requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    const notification: AgentNotification = {
      id: requestId,
      sessionId,
      channel,
      channelUserId,
      reason,
      createdAt: new Date(),
      status: 'pending',
    };

    this.pendingRequests.set(requestId, notification);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    await this.notifyAgents(availableAgents, notification);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    await this.chatService.postMessage({
      sessionId,
      sender: 'system',
      text: `üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${availableAgents.length} –∞–≥–µ–Ω—Ç–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...`,
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç (5 –º–∏–Ω—É—Ç)
    setTimeout(() => {
      this.handleRequestTimeout(requestId);
    }, 5 * 60 * 1000);

    this.logger.log(`Agent request created: ${requestId} for session ${sessionId}`);

    return {
      success: true,
      requestId,
      message: `–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${availableAgents.length} –∞–≥–µ–Ω—Ç–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...`,
    };
  }

  /**
   * –ê–≥–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å
   */
  async acceptRequest(agentId: string, requestId: string): Promise<{ success: boolean; message: string }> {
    const request = this.pendingRequests.get(requestId);
    
    if (!request) {
      return {
        success: false,
        message: '–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
      };
    }

    if (request.status !== 'pending') {
      return {
        success: false,
        message: '–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥—Ä—É–≥–∏–º –∞–≥–µ–Ω—Ç–æ–º',
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≥–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    const agent = await this.prisma.agent.findUnique({
      where: { id: agentId },
    });

    if (!agent || agent.status !== 'online') {
      return {
        success: false,
        message: '–ê–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
      };
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    request.status = 'accepted';
    request.acceptedBy = agentId;
    this.pendingRequests.set(requestId, request);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —á–∞—Ç–∞
    await this.prisma.chatSession.update({
      where: { id: request.sessionId },
      data: {
        agentId: agentId,
        state: 'agent', // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º –∞–≥–µ–Ω—Ç–∞
      },
    });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    await this.chatService.postMessage({
      sessionId: request.sessionId,
      sender: 'system',
      text: `‚úÖ –ö —á–∞—Ç—É –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∞–≥–µ–Ω—Ç ${agent.name}. –¢–µ–ø–µ—Ä—å –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –∂–∏–≤—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.`,
    });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤, —á—Ç–æ –∑–∞—è–≤–∫–∞ –∑–∞–Ω—è—Ç–∞
    await this.notifyAgentsRequestAccepted(requestId, agent.name);

    this.logger.log(`Agent ${agent.name} (${agentId}) accepted request ${requestId}`);

    return {
      success: true,
      message: `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —á–∞—Ç—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º`,
    };
  }

  /**
   * –ê–≥–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å
   */
  async rejectRequest(agentId: string, requestId: string): Promise<{ success: boolean; message: string }> {
    const request = this.pendingRequests.get(requestId);
    
    if (!request) {
      return {
        success: false,
        message: '–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω',
      };
    }

    if (request.status !== 'pending') {
      return {
        success: false,
        message: '–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≥–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const agent = await this.prisma.agent.findUnique({
      where: { id: agentId },
    });

    if (!agent) {
      return {
        success: false,
        message: '–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
      };
    }

    this.logger.log(`Agent ${agent.name} (${agentId}) rejected request ${requestId}`);

    return {
      success: true,
      message: '–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω',
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∞–≥–µ–Ω—Ç–∞
   */
  async getAgentRequests(agentId: string): Promise<AgentNotification[]> {
    return Array.from(this.pendingRequests.values())
      .filter(req => req.status === 'pending');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
   */
  async getRequestInfo(requestId: string): Promise<AgentNotification | null> {
    return this.pendingRequests.get(requestId) || null;
  }

  /**
   * –£–≤–µ–¥–æ–º–∏—Ç—å –∞–≥–µ–Ω—Ç–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
   */
  private async notifyAgents(agents: AgentStatus[], notification: AgentNotification): Promise<void> {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram/WhatsApp/Email
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    this.logger.log(`Notifying ${agents.length} agents about request ${notification.id}`);
    
    for (const agent of agents) {
      this.logger.log(`Agent ${agent.name} (${agent.login}) notified about session ${notification.sessionId}`);
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–∏—Ç—å –∞–≥–µ–Ω—Ç–æ–≤ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
   */
  private async notifyAgentsRequestAccepted(requestId: string, acceptedBy: string): Promise<void> {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    this.logger.log(`Notifying other agents that request ${requestId} was accepted by ${acceptedBy}`);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
   */
  private async handleRequestTimeout(requestId: string): Promise<void> {
    const request = this.pendingRequests.get(requestId);
    
    if (request && request.status === 'pending') {
      request.status = 'expired';
      this.pendingRequests.set(requestId, request);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ —Ç–∞–π–º–∞—É—Ç–µ
      await this.chatService.postMessage({
        sessionId: request.sessionId,
        sender: 'system',
        text: '‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.',
      });

      this.logger.log(`Request ${requestId} expired`);
    }
  }

  /**
   * –ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å —á–∞—Ç–æ–º
   */
  async endAgentSession(sessionId: string, agentId: string): Promise<{ success: boolean; message: string }> {
    const session = await this.prisma.chatSession.findUnique({
      where: { id: sessionId },
    });

    if (!session || session.agentId !== agentId) {
      return {
        success: false,
        message: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–≥–µ–Ω—Ç–æ–º —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏',
      };
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ AI
    await this.prisma.chatSession.update({
      where: { id: sessionId },
      data: {
        agentId: null,
        state: 'qa',
      },
    });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    await this.chatService.postMessage({
      sessionId,
      sender: 'system',
      text: 'üëã –ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –¢–µ–ø–µ—Ä—å –≤—ã —Å–Ω–æ–≤–∞ –æ–±—â–∞–µ—Ç–µ—Å—å —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.',
    });

    this.logger.log(`Agent ${agentId} ended session ${sessionId}`);

    return {
      success: true,
      message: '–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥–µ–Ω—Ç–æ–≤
   */
  async getAgentsStats(): Promise<{
    total: number;
    online: number;
    busy: number;
    offline: number;
    pendingRequests: number;
  }> {
    const agents = await this.prisma.agent.findMany();
    const pendingRequests = Array.from(this.pendingRequests.values())
      .filter(req => req.status === 'pending').length;

    return {
      total: agents.length,
      online: agents.filter(a => a.status === 'online').length,
      busy: agents.filter(a => a.status === 'busy').length,
      offline: agents.filter(a => a.status === 'offline').length,
      pendingRequests,
    };
  }
}
