import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../../prisma/prisma.service';
import { CollectedData } from '../data-collector.service';

export interface NotificationConfig {
  email: {
    enabled: boolean;
    recipients: string[];
  };
  telegram: {
    enabled: boolean;
    botToken?: string;
    chatId?: string;
  };
  webhook: {
    enabled: boolean;
    url?: string;
  };
}

@Injectable()
export class NotificationService {
  private readonly logger = new Logger(NotificationService.name);
  private readonly config: NotificationConfig;

  constructor(
    private readonly prisma: PrismaService,
  ) {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    this.config = {
      email: {
        enabled: process.env.NOTIFICATION_EMAIL_ENABLED === 'true',
        recipients: process.env.NOTIFICATION_EMAIL_RECIPIENTS?.split(',') || [],
      },
      telegram: {
        enabled: process.env.NOTIFICATION_TELEGRAM_ENABLED === 'true',
        botToken: process.env.TELEGRAM_BOT_TOKEN,
        chatId: process.env.TELEGRAM_CHAT_ID,
      },
      webhook: {
        enabled: process.env.NOTIFICATION_WEBHOOK_ENABLED === 'true',
        url: process.env.NOTIFICATION_WEBHOOK_URL,
      },
    };
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async notifyNewData(companyCode: string, dataCount: number): Promise<void> {
    const message = `üìä –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç ${companyCode}: —Å–æ–±—Ä–∞–Ω–æ ${dataCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`;
    
    await this.sendNotification('new_data', {
      companyCode,
      dataCount,
      message,
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await this.saveNotification({
      type: 'new_data',
      companyCode,
      title: '–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã',
      message,
      data: { dataCount },
    });
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  async notifyError(companyCode: string, errorMessage: string): Promise<void> {
    const message = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç ${companyCode}: ${errorMessage}`;
    
    await this.sendNotification('error', {
      companyCode,
      errorMessage,
      message,
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await this.saveIncident({
      type: 'data_collection_error',
      details: `Company: ${companyCode}, Error: ${errorMessage}`,
    });

    await this.saveNotification({
      type: 'error',
      companyCode,
      title: '–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö',
      message,
      data: { errorMessage },
    });
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  async notifyDataChange(companyCode: string, productCode: string, changeType: string): Promise<void> {
    const message = `üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç ${companyCode} (${productCode}): ${changeType}`;
    
    await this.sendNotification('data_change', {
      companyCode,
      productCode,
      changeType,
      message,
    });

    await this.saveNotification({
      type: 'data_change',
      companyCode,
      title: '–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö',
      message,
      data: { productCode, changeType },
    });
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  async notifyCollectionComplete(companyCode: string, stats: {
    totalItems: number;
    newItems: number;
    updatedItems: number;
    duration: number;
  }): Promise<void> {
    const message = `‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Ç ${companyCode} –∑–∞–≤–µ—Ä—à–µ–Ω\n` +
      `üìà –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${stats.totalItems}\n` +
      `üÜï –ù–æ–≤—ã—Ö: ${stats.newItems}\n` +
      `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${stats.updatedItems}\n` +
      `‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${stats.duration}–º—Å`;

    await this.sendNotification('collection_complete', {
      companyCode,
      stats,
      message,
    });

    await this.saveNotification({
      type: 'collection_complete',
      companyCode,
      title: '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω',
      message,
      data: stats,
    });
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å API
   */
  async notifyApiIssue(companyCode: string, issue: string): Promise<void> {
    const message = `‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å API ${companyCode}: ${issue}`;
    
    await this.sendNotification('api_issue', {
      companyCode,
      issue,
      message,
    });

    await this.saveIncident({
      type: 'api_issue',
      details: `Company: ${companyCode}, Issue: ${issue}`,
    });
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
   */
  async notifyWebsiteUnavailable(companyCode: string, website: string): Promise<void> {
    const message = `üåê –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${companyCode} (${website})`;
    
    await this.sendNotification('website_unavailable', {
      companyCode,
      website,
      message,
    });

    await this.saveIncident({
      type: 'website_unavailable',
      details: `Company: ${companyCode}, Website: ${website}`,
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
   */
  private async sendNotification(type: string, data: any): Promise<void> {
    const promises: Promise<void>[] = [];

    // Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (this.config.email.enabled) {
      promises.push(this.sendEmailNotification(data.message, type, data));
    }

    // Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (this.config.telegram.enabled && this.config.telegram.botToken && this.config.telegram.chatId) {
      promises.push(this.sendTelegramNotification(data.message, type, data));
    }

    // Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (this.config.webhook.enabled && this.config.webhook.url) {
      promises.push(this.sendWebhookNotification(type, data));
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    try {
      await Promise.allSettled(promises);
    } catch (error) {
      this.logger.error('Error sending notifications:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private async sendEmailNotification(message: string, type: string, data: any): Promise<void> {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å–µ—Ä–≤–∏—Å–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ email (–Ω–∞–ø—Ä–∏–º–µ—Ä, SendGrid, Nodemailer)
      this.logger.log(`Email notification: ${message}`);
      
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è email –æ—Ç–ø—Ä–∞–≤–∫–∏
      for (const recipient of this.config.email.recipients) {
        this.logger.debug(`Would send email to ${recipient}: ${message}`);
      }
      
    } catch (error) {
      this.logger.error('Failed to send email notification:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private async sendTelegramNotification(message: string, type: string, data: any): Promise<void> {
    try {
      const telegramApiUrl = `https://api.telegram.org/bot${this.config.telegram.botToken}/sendMessage`;
      
      const response = await fetch(telegramApiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: this.config.telegram.chatId,
          text: message,
          parse_mode: 'HTML',
        }),
      });

      if (!response.ok) {
        throw new Error(`Telegram API error: ${response.status}`);
      }

      this.logger.log(`Telegram notification sent: ${message}`);
      
    } catch (error) {
      this.logger.error('Failed to send Telegram notification:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private async sendWebhookNotification(type: string, data: any): Promise<void> {
    try {
      const payload = {
        type,
        timestamp: new Date().toISOString(),
        data,
      };

      const response = await fetch(this.config.webhook.url!, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        throw new Error(`Webhook error: ${response.status}`);
      }

      this.logger.log(`Webhook notification sent: ${type}`);
      
    } catch (error) {
      this.logger.error('Failed to send webhook notification:', error);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  private async saveNotification(notification: {
    type: string;
    companyCode: string;
    title: string;
    message: string;
    data?: any;
  }): Promise<void> {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      this.logger.debug(`Notification saved: ${notification.type} for ${notification.companyCode}`);
    } catch (error) {
      this.logger.error('Failed to save notification:', error);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  private async saveIncident(incident: {
    type: string;
    details: string;
  }): Promise<void> {
    try {
      await this.prisma.incident.create({
        data: {
          type: incident.type,
          details: incident.details,
        },
      });
      
      this.logger.debug(`Incident saved: ${incident.type}`);
    } catch (error) {
      this.logger.error('Failed to save incident:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async getNotificationHistory(limit: number = 50): Promise<any[]> {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      return [];
    } catch (error) {
      this.logger.error('Failed to get notification history:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async getNotificationStats(): Promise<{
    totalNotifications: number;
    notificationsByType: Record<string, number>;
    lastNotificationTime: Date | null;
  }> {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      return {
        totalNotifications: 0,
        notificationsByType: {},
        lastNotificationTime: null,
      };
    } catch (error) {
      this.logger.error('Failed to get notification stats:', error);
      return {
        totalNotifications: 0,
        notificationsByType: {},
        lastNotificationTime: null,
      };
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async testNotifications(): Promise<{
    email: boolean;
    telegram: boolean;
    webhook: boolean;
  }> {
    const testMessage = 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö';
    const results = {
      email: false,
      telegram: false,
      webhook: false,
    };

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º email
    if (this.config.email.enabled) {
      try {
        await this.sendEmailNotification(testMessage, 'test', {});
        results.email = true;
      } catch (error) {
        this.logger.error('Email test failed:', error);
      }
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram
    if (this.config.telegram.enabled) {
      try {
        await this.sendTelegramNotification(testMessage, 'test', {});
        results.telegram = true;
      } catch (error) {
        this.logger.error('Telegram test failed:', error);
      }
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook
    if (this.config.webhook.enabled) {
      try {
        await this.sendWebhookNotification('test', { message: testMessage });
        results.webhook = true;
      } catch (error) {
        this.logger.error('Webhook test failed:', error);
      }
    }

    return results;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  getNotificationConfig(): NotificationConfig {
    return { ...this.config };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  updateNotificationConfig(config: Partial<NotificationConfig>): void {
    Object.assign(this.config, config);
    this.logger.log('Notification configuration updated');
  }
}


