import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { Observable, Subject } from 'rxjs';
import { DuplicateDetectorService } from '../file-upload/services/duplicate-detector.service';
import { DateValidatorService, DateValidationResult } from '../file-upload/services/date-validator.service';

export interface DocumentAnalysis {
  docId: string;
  title: string;
  companyCode: string;
  productCode: string;
  score: number; // 0-100
  issues: string[];
  recommendation: 'keep' | 'review' | 'delete';
  reason: string;
  details: {
    hasUsefulContent: boolean;
    hasSpecificInfo: boolean;
    isRelevant: boolean;
    isDuplicate: boolean;
    isOutdated: boolean;
    isTestData: boolean;
    contentLength: number;
    duplicates?: Array<{ docId: string; title: string; similarity: number; reason: string }>;
    dateValidation?: DateValidationResult;
    hasNewerVersion?: boolean;
    newerVersionInfo?: string;
    expiredInfo?: {
      expiredDate: string;
      context: string;
      source: string;
    };
    // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
    companyValidation?: {
      isCorrect: boolean;
      suggestedCompany?: string;
      confidence: number;
      reason: string;
    };
    titleValidation?: {
      isCorrect: boolean;
      suggestedTitle?: string;
      confidence: number;
      reason: string;
    };
  };
}

@Injectable()
export class DocumentAnalyzerService {
  private readonly logger = new Logger(DocumentAnalyzerService.name);
  private analysisStreams = new Map<string, any>();
  public lastAnalysisResults: DocumentAnalysis[] = [];

  constructor(
    private readonly prisma: PrismaService,
    private readonly duplicateDetector: DuplicateDetectorService,
    private readonly dateValidator: DateValidatorService,
  ) {}

  /**
   * –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
   */
  async analyzeAllDocuments(options?: { includeApproved?: boolean }): Promise<DocumentAnalysis[]> {
    this.logger.log('Starting document analysis');

    const documents = await this.prisma.kBDoc.findMany({
      where: options?.includeApproved === false ? { isApproved: false } : undefined,
      include: {
        chunks: true,
      },
    });

    const analyses: DocumentAnalysis[] = [];

    for (const doc of documents) {
      const analysis = await this.analyzeDocument(doc);
      analyses.push(analysis);
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score (—Ö—É–¥—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
    return analyses.sort((a, b) => a.score - b.score);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  async analyzeAllDocumentsWithProgress(options?: { 
    includeApproved?: boolean;
    includeObsolete?: boolean;
    analysisId?: string;
    limit?: number;
    companyCode?: string;
  }): Promise<DocumentAnalysis[]> {
    const analysisId = options?.analysisId || `analysis-${Date.now()}`;
    const progressSubject = new Subject<any>();
    this.analysisStreams.set(analysisId, progressSubject);

    this.logger.log(`Starting document analysis with progress tracking: ${analysisId}`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      this.sendAnalysisProgress(analysisId, {
        step: 'loading',
        progress: 0,
        message: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...',
        details: {}
      });

      this.logger.log(`Loading documents with limit: ${options?.limit || 'no limit'}`);
      this.logger.log(`Limit type: ${typeof options?.limit}, value: ${JSON.stringify(options?.limit)}`);

      const whereConditions: any = {};
      
      if (options?.includeApproved === false) {
        whereConditions.isApproved = false;
      }
      
      if (options?.includeObsolete === false) {
        whereConditions.isObsolete = false;
      }
      
      if (options?.companyCode) {
        whereConditions.companyCode = options.companyCode;
      }

      const queryOptions: any = {
        where: Object.keys(whereConditions).length > 0 ? whereConditions : undefined,
        include: {
          chunks: {
            select: {
              text: true
            }
          },
        },
        orderBy: {
          createdAt: 'desc'
        }
      };

      // –î–æ–±–∞–≤–ª—è–µ–º take —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ª–∏–º–∏—Ç —É–∫–∞–∑–∞–Ω
      if (options?.limit && options.limit > 0) {
        queryOptions.take = options.limit;
        this.logger.log(`Setting take limit to: ${options.limit}`);
      } else {
        this.logger.log(`No limit set - will fetch all documents`);
      }

      const documents = await this.prisma.kBDoc.findMany(queryOptions);

      this.logger.log(`Loaded ${documents.length} documents for analysis`);

      const totalDocs = documents.length;
      const analyses: DocumentAnalysis[] = [];

      this.sendAnalysisProgress(analysisId, {
        step: 'analyzing',
        progress: 5,
        message: `–ù–∞–π–¥–µ–Ω–æ ${totalDocs} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`,
        details: { totalDocuments: totalDocs }
      });

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
      for (let i = 0; i < documents.length; i++) {
        const doc = documents[i];
        const progress = Math.round(((i + 1) / totalDocs) * 90) + 5; // 5-95%

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–Ω–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞)
        this.sendAnalysisProgress(analysisId, {
          step: 'analyzing',
          progress: Math.round((i / totalDocs) * 90) + 5,
          message: `üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç ${i + 1} –∏–∑ ${totalDocs}`,
          details: {
            current: i + 1,
            total: totalDocs,
            currentDocument: doc.title.length > 60 ? doc.title.substring(0, 60) + '...' : doc.title,
            companyCode: doc.companyCode,
            status: 'üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑...'
          }
        });

        try {
          const analysis = await this.analyzeDocument(doc, documents);
          analyses.push(analysis);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
          const statusParts = [`‚úÖ –û—Ü–µ–Ω–∫–∞: ${analysis.score}/100 (${analysis.recommendation})`];
          if (analysis.details.isDuplicate) {
            statusParts.push(`üîÑ ${analysis.details.duplicates?.length || 0} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
          }
          if (analysis.details.isOutdated) {
            statusParts.push('‚ö†Ô∏è –£—Å—Ç–∞—Ä–µ–ª');
          }
          if (analysis.details.hasNewerVersion) {
            statusParts.push('üÜï –ï—Å—Ç—å –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è');
          }
          
          this.sendAnalysisProgress(analysisId, {
            step: 'analyzing',
            progress: Math.round(((i + 1) / totalDocs) * 90) + 5,
            message: `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω –∞–Ω–∞–ª–∏–∑ ${i + 1} –∏–∑ ${totalDocs}`,
            details: {
              current: i + 1,
              total: totalDocs,
              currentDocument: doc.title.length > 60 ? doc.title.substring(0, 60) + '...' : doc.title,
              companyCode: doc.companyCode,
              status: statusParts.join(' | '),
              score: analysis.score,
              recommendation: analysis.recommendation,
              isDuplicate: analysis.details.isDuplicate,
              isOutdated: analysis.details.isOutdated,
              duplicatesCount: analysis.details.duplicates?.length || 0
            }
          });
        } catch (error) {
          this.logger.error(`Error analyzing document ${doc.id}:`, error);
          // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          analyses.push({
            docId: doc.id,
            title: doc.title,
            companyCode: doc.companyCode,
            productCode: doc.productCode,
            score: 0,
            issues: ['–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'],
            recommendation: 'review',
            reason: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ',
            details: {
              hasUsefulContent: false,
              hasSpecificInfo: false,
              isRelevant: false,
              isDuplicate: false,
              isOutdated: false,
              isTestData: false,
              contentLength: 0,
            }
          });
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∏ —É–±—Ä–∞–Ω—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
      }

      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
      const duplicatesCount = analyses.filter(a => a.details.isDuplicate).length;
      const outdatedCount = analyses.filter(a => a.details.isOutdated).length;
      const newerVersionsCount = analyses.filter(a => a.details.hasNewerVersion).length;
      const problemDocuments = analyses.filter(a => a.score < 70).length;
      
      this.sendAnalysisProgress(analysisId, {
        step: 'complete',
        progress: 100,
        message: '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!',
        details: {
          totalAnalyzed: analyses.length,
          averageScore: Math.round(analyses.reduce((sum, a) => sum + a.score, 0) / analyses.length),
          problemDocuments,
          duplicatesCount,
          outdatedCount,
          newerVersionsCount,
          summary: `–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö: ${problemDocuments}, –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicatesCount}, –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö: ${outdatedCount}, –ï—Å—Ç—å –Ω–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏: ${newerVersionsCount}`
        }
      });

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score (—Ö—É–¥—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
      const sortedAnalyses = analyses.sort((a, b) => a.score - b.score);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à
      this.lastAnalysisResults = sortedAnalyses;
      this.logger.log(`Cached ${sortedAnalyses.length} analysis results`);

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      setTimeout(() => {
        const observer = this.analysisStreams.get(analysisId);
        if (observer) {
          this.logger.log(`Closing SSE stream for analysis: ${analysisId}`);
          observer.complete();
        }
        this.analysisStreams.delete(analysisId);
        this.logger.log(`Deleted SSE stream for analysis: ${analysisId}`);
      }, 3000);

      return sortedAnalyses;

    } catch (error) {
      this.sendAnalysisProgress(analysisId, {
        step: 'error',
        progress: 0,
        message: `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`,
        details: { error: error.message }
      });

      setTimeout(() => {
        progressSubject.complete();
        this.analysisStreams.delete(analysisId);
      }, 1000);

      this.logger.error('Error during document analysis:', error);
      throw error;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  async analyzeDocument(doc: any, allDocuments?: any[]): Promise<DocumentAnalysis> {
    this.logger.debug(`Starting analysis of document: ${doc.title}`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ
      let content = '';
      try {
        content = doc.chunks && doc.chunks.length > 0
          ? doc.chunks.map((chunk) => chunk.text || '').join(' ')
          : '';
      } catch (e) {
        this.logger.warn(`Error getting content for doc ${doc.id}:`, e);
        content = '';
      }

      this.logger.debug(`Content length: ${content.length}`);

      // –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      const issues: string[] = [];
      let score = 80; // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞

      // –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      const hasUsefulContent = content.length > 100;
      if (!hasUsefulContent) {
        issues.push('–ú–∞–ª–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ');
      score -= 30;
    }

      const hasInsuranceWords = /—Å—Ç—Ä–∞—Ö–æ–≤|–ø–æ–ª–∏—Å|–≤—ã–ø–ª–∞—Ç/i.test(content);
      if (!hasInsuranceWords) {
        issues.push('–ù–µ—Ç —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤');
        score -= 20;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      let duplicates: Array<{ docId: string; title: string; similarity: number; reason: string }> = [];
      let isDuplicate = false;
      
      if (allDocuments && allDocuments.length > 1) {
        try {
          duplicates = await this.duplicateDetector.findDuplicates({
            title: doc.title,
            content: content,
            companyCode: doc.companyCode,
            productCode: doc.productCode,
            excludeDocId: doc.id, // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
          });
          
          if (duplicates.length > 0) {
            isDuplicate = true;
            issues.push(`–ù–∞–π–¥–µ–Ω–æ ${duplicates.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
            score -= 15; // –°–Ω–∏–∂–∞–µ–º –æ—Ü–µ–Ω–∫—É –∑–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
          }
        } catch (error) {
          this.logger.warn(`Error checking duplicates for doc ${doc.id}:`, error);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞—Ç
      let dateValidation: DateValidationResult | undefined;
      let isOutdated = false;
      let expiredInfo: { expiredDate: string; context: string; source: string } | undefined;
      
      try {
        dateValidation = await this.dateValidator.validateDocumentDates({
          title: doc.title,
          content: content,
          filename: doc.filename
        });
        
        if (dateValidation && dateValidation.warnings.length > 0) {
          const outdatedWarnings = dateValidation.warnings.filter(w => 
            w.includes('—É—Å—Ç–∞—Ä–µ–ª') || w.includes('–∏—Å—Ç–µ–∫') || w.includes('–Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω')
          );
          
          if (outdatedWarnings.length > 0) {
            isOutdated = true;
            issues.push(`–î–æ–∫—É–º–µ–Ω—Ç —É—Å—Ç–∞—Ä–µ–ª: ${outdatedWarnings.length} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`);
            score -= 25; // –°–∏–ª—å–Ω–æ —Å–Ω–∏–∂–∞–µ–º –æ—Ü–µ–Ω–∫—É –∑–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
            const expiredDate = dateValidation.foundDates.find(d => d.isExpired);
            if (expiredDate) {
              expiredInfo = {
                expiredDate: expiredDate.date,
                context: expiredDate.context,
                source: `–î–æ–∫—É–º–µ–Ω—Ç "${doc.title}"`
              };
            }
          } else if (dateValidation.warnings.length > 0) {
            issues.push(`–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∞—Ç–∞–º–∏: ${dateValidation.warnings.length} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`);
            score -= 10;
          }
        }
      } catch (error) {
        this.logger.warn(`Error validating dates for doc ${doc.id}:`, error);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Ç–æ–º—É –∂–µ –ø—Ä–æ–¥—É–∫—Ç—É
      let hasNewerVersion = false;
      let newerVersionInfo = '';
      
      if (doc.productCode && allDocuments && allDocuments.length > 1) {
        try {
          // –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Ç–æ–º—É –∂–µ –ø—Ä–æ–¥—É–∫—Ç—É
          const sameProductDocs = allDocuments.filter(otherDoc => 
            otherDoc.id !== doc.id && 
            otherDoc.productCode === doc.productCode &&
            otherDoc.companyCode === doc.companyCode
          );
          
          if (sameProductDocs.length > 0) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            const currentDocDates = this.extractEffectiveDates(content, doc.title);
            
            for (const otherDoc of sameProductDocs) {
              const otherContent = otherDoc.chunks && otherDoc.chunks.length > 0
                ? otherDoc.chunks.map((chunk) => chunk.text || '').join(' ')
                : '';
              const otherDocDates = this.extractEffectiveDates(otherContent, otherDoc.title);
              
              // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è
              if (currentDocDates.effectiveDate && otherDocDates.effectiveDate) {
                if (otherDocDates.effectiveDate > currentDocDates.effectiveDate) {
                  hasNewerVersion = true;
                  const currentDateStr = currentDocDates.effectiveDate.toLocaleDateString('ru-RU');
                  const newerDateStr = otherDocDates.effectiveDate.toLocaleDateString('ru-RU');
                  newerVersionInfo = `–ü–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É –Ω–∞–π–¥–µ–Ω—ã –±–æ–ª–µ–µ —Å–≤–µ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: –¥–æ–∫—É–º–µ–Ω—Ç "${otherDoc.title}" (ID: ${otherDoc.id}) –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å ${newerDateStr}, —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç ${currentDateStr}`;
                  issues.push(`–ï—Å—Ç—å –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: "${otherDoc.title}" –æ—Ç ${newerDateStr}, —Ç–µ–∫—É—â–∏–π –æ—Ç ${currentDateStr}`);
                  score -= 20;
                  break;
                }
              }
            }
          }
        } catch (error) {
          this.logger.warn(`Error checking for newer versions for doc ${doc.id}:`, error);
        }
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, –¥–∞—Ç –∏ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π
    let recommendation: 'keep' | 'review' | 'delete';
    let reason: string;

    if (isOutdated) {
      recommendation = 'delete';
      reason = '–î–æ–∫—É–º–µ–Ω—Ç —É—Å—Ç–∞—Ä–µ–ª –∏ –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω';
    } else if (hasNewerVersion) {
      recommendation = 'delete';
      reason = newerVersionInfo || '–ï—Å—Ç—å –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞';
    } else if (isDuplicate && score < 60) {
      recommendation = 'delete';
      reason = '–î—É–±–ª–∏–∫–∞—Ç —Å –Ω–∏–∑–∫–æ–π –æ—Ü–µ–Ω–∫–æ–π';
    } else if (isDuplicate) {
      recommendation = 'review';
      reason = '–í–æ–∑–º–æ–∂–Ω—ã–π –¥—É–±–ª–∏–∫–∞—Ç, —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏';
    } else if (score >= 70) {
      recommendation = 'keep';
      reason = '–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é';
    } else if (score >= 40) {
      recommendation = 'review';
      reason = '–î–æ–∫—É–º–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏';
    } else {
      recommendation = 'delete';
      reason = '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏';
    }

    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –∫–æ–º–ø–∞–Ω–∏–∏
    const companyValidation = this.analyzeCompanyBelonging(content, doc.title, doc.companyCode);
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
    const titleValidation = this.analyzeTitleCorrectness(content, doc.title, doc.companyCode, doc.productCode);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–ø–∏—Å–æ–∫ issues
    if (!companyValidation.isCorrect) {
      issues.push(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –∫–æ–º–ø–∞–Ω–∏–∏: ${companyValidation.reason}`);
      score -= 10;
    }
    
    if (!titleValidation.isCorrect) {
      issues.push(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${titleValidation.reason}`);
      score -= 5;
    }

      const result = {
      docId: doc.id,
      title: doc.title,
        companyCode: doc.companyCode || 'UNKNOWN',
        productCode: doc.productCode || 'UNKNOWN',
      score: Math.max(0, score),
      issues,
      recommendation,
      reason,
      details: {
        hasUsefulContent,
          hasSpecificInfo: hasInsuranceWords,
          isRelevant: hasInsuranceWords,
        isDuplicate,
        isOutdated,
          isTestData: false,
        contentLength: content.length,
          duplicates: duplicates.length > 0 ? duplicates : undefined,
          dateValidation,
          hasNewerVersion,
          newerVersionInfo: hasNewerVersion ? newerVersionInfo : undefined,
          expiredInfo,
          companyValidation,
          titleValidation,
        },
      };

      this.logger.debug(`Completed analysis of document: ${doc.title}, score: ${result.score}, duplicates: ${duplicates.length}, outdated: ${isOutdated}`);
      return result;

    } catch (error) {
      this.logger.error(`Critical error analyzing document ${doc.id}:`, error);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return {
        docId: doc.id,
        title: doc.title || 'Unknown',
        companyCode: doc.companyCode || 'UNKNOWN',
        productCode: doc.productCode || 'UNKNOWN',
        score: 50,
        issues: ['–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞'],
        recommendation: 'review',
        reason: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ',
        details: {
          hasUsefulContent: false,
          hasSpecificInfo: false,
          isRelevant: false,
          isDuplicate: false,
          isOutdated: false,
          isTestData: false,
          contentLength: 0,
        },
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  private checkSpecificInfo(content: string): boolean {
    const lowerContent = content.toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–Ω
    const hasPrices = /\d+[\s,.]?\d*\s*(—Ä—É–±|‚ÇΩ|—Ä—É–±–ª–µ–π)/i.test(content);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ä–æ–∫–æ–≤
    const hasTerms = /\d+\s*(–º–µ—Å—è—Ü|–≥–æ–¥|–ª–µ—Ç|–¥–Ω)/i.test(content);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    const hasPercents = /\d+[\s,.]?\d*\s*%/.test(content);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è
    const hasInsuranceKeywords =
      lowerContent.includes('—Å—Ç—Ä–∞—Ö–æ–≤') ||
      lowerContent.includes('–ø–æ–ª–∏—Å') ||
      lowerContent.includes('–≤—ã–ø–ª–∞—Ç') ||
      lowerContent.includes('–≤–æ–∑–º–µ—â') ||
      lowerContent.includes('–ø–æ–∫—Ä—ã—Ç–∏') ||
      lowerContent.includes('—Ä–∏—Å–∫');

    return (hasPrices || hasTerms || hasPercents) && hasInsuranceKeywords;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
   */
  private checkRelevance(content: string, productCode: string): boolean {
    const lowerContent = content.toLowerCase();

    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    const productKeywords: Record<string, string[]> = {
      OSAGO: ['–æ—Å–∞–≥–æ', '–∞–≤—Ç–æ–≥—Ä–∞–∂–¥–∞–Ω–∫–∞', '–¥—Ç–ø', '–≤–æ–¥–∏—Ç–µ–ª', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–∞–≤—Ç–æ–º–æ–±–∏–ª'],
      KASKO: ['–∫–∞—Å–∫–æ', '—É—â–µ—Ä–±', '—É–≥–æ–Ω', '–∞–≤—Ç–æ', '–º–∞—à–∏–Ω', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'],
      HEALTH: ['–∑–¥–æ—Ä–æ–≤—å–µ', '–º–µ–¥–∏—Ü–∏–Ω', '–¥–º—Å', '–ª–µ—á–µ–Ω–∏–µ', '–≤—Ä–∞—á', '–∫–ª–∏–Ω–∏–∫'],
      LIFE: ['–∂–∏–∑–Ω—å', '—Å–º–µ—Ä—Ç', '–∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç', '–≤—ã–≥–æ–¥–æ–ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç–µ–ª'],
      PROPERTY: ['–∏–º—É—â–µ—Å—Ç–≤–æ', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç', '–∫–≤–∞—Ä—Ç–∏—Ä', '–¥–æ–º', '–ø–æ–∂–∞—Ä'],
      TRAVEL: ['–ø—É—Ç–µ—à–µ—Å—Ç–≤', '—Ç—É—Ä–∏–∑–º', '–∑–∞–≥—Ä–∞–Ω–∏—Ü', '–≤–∏–∑', '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å –∑–∞ —Ä—É–±–µ–∂–æ–º'],
    };

    const keywords = productKeywords[productCode] || ['—Å—Ç—Ä–∞—Ö–æ–≤', '–ø–æ–ª–∏—Å'];

    return keywords.some((keyword) => lowerContent.includes(keyword));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
   */
  private async checkForDuplicates(doc: any, content: string): Promise<boolean> {
    const similarDocs = await this.prisma.kBDoc.findMany({
      where: {
        companyCode: doc.companyCode,
        productCode: doc.productCode,
        NOT: {
          id: doc.id,
        },
      },
      include: {
        chunks: true,
      },
    });

    for (const otherDoc of similarDocs) {
      const otherContent = otherDoc.chunks.map((c) => c.text).join(' ');

      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ö–æ–∂–µ—Å—Ç—å –ø–æ –¥–ª–∏–Ω–µ –∏ –ø–µ—Ä–≤—ã–º —Å–ª–æ–≤–∞–º
      if (Math.abs(content.length - otherContent.length) < 100) {
        const firstWords = content.substring(0, 200).toLowerCase();
        const otherFirstWords = otherContent.substring(0, 200).toLowerCase();

        if (firstWords === otherFirstWords) {
          return true;
        }
      }
    }

    return false;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –≥–æ–¥—É
   */
  private checkOutdated(content: string, title: string): boolean {
    const currentYear = new Date().getFullYear();
    const yearMatch = (content + ' ' + title).match(/20(2[0-9]|3[0-9])/g);

    if (!yearMatch) {
      return true; // –ù–µ—Ç –≥–æ–¥–∞ - –≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞—Ä–µ–ª–æ
    }

    const years = yearMatch.map((y) => parseInt(y));
    const maxYear = Math.max(...years);

    // –ï—Å–ª–∏ –≥–æ–¥ —Å—Ç–∞—Ä—à–µ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞ 2+ –≥–æ–¥–∞ - —É—Å—Ç–∞—Ä–µ–ª–æ
    return currentYear - maxYear >= 2;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–∑–æ–≤—ã–µ/—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  private isBasicData(content: string, title: string): boolean {
    const lowerContent = content.toLowerCase();
    const lowerTitle = title.toLowerCase();

    // –ü—Ä–∏–∑–Ω–∞–∫–∏ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const basicPhrases = [
      '—ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç',
      '—Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
      '–æ–¥–Ω–∞ –∏–∑ –≤–µ–¥—É—â–∏—Ö —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π —Ä–æ—Å—Å–∏–∏',
      '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä',
      '–±–∞–∑–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç',
      '–±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
    ];

    for (const phrase of basicPhrases) {
      if (lowerContent.includes(phrase) || lowerTitle.includes(phrase)) {
        return true;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –æ–±—â–∏–π —Ç–µ–∫—Å—Ç
    if (content.length < 200 && !content.includes('—Ä—É–±') && !content.includes('‚ÇΩ')) {
      return true;
    }

    return false;
  }

  /**
   * –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
   */
  async deleteDocuments(docIds: string[]): Promise<{ deleted: number }> {
    let deleted = 0;

    for (const docId of docIds) {
      try {
        // –£–¥–∞–ª—è–µ–º —á–∞–Ω–∫–∏
        await this.prisma.kBChunk.deleteMany({
          where: { docId },
        });

        // –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        await this.prisma.kBDoc.delete({
          where: { id: docId },
        });

        deleted++;
      } catch (error) {
        this.logger.error(`Error deleting document ${docId}:`, error);
      }
    }

    this.logger.log(`Deleted ${deleted} documents`);
    return { deleted };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  getAnalysisProgressStream(analysisId: string): Observable<any> {
    this.logger.log(`Creating simple analysis progress stream for: ${analysisId}`);
    
    return new Observable(observer => {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º observer –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      this.analysisStreams.set(analysisId, observer);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      observer.next({
        data: JSON.stringify({
          step: 'waiting',
          progress: 0,
          message: '–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞...',
          details: { analysisId }
        })
      });
      
      return () => {
        this.analysisStreams.delete(analysisId);
        this.logger.log(`Cleaned up SSE stream for analysis: ${analysisId}`);
      };
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞
   */
  public sendAnalysisProgress(analysisId: string, data: {
    step: string;
    progress: number;
    message: string;
    details?: any;
  }): void {
    const observer = this.analysisStreams.get(analysisId);
    if (observer) {
      const sseData = {
        data: JSON.stringify(data)
      };
      this.logger.log(`Sending analysis progress for ${analysisId}:`, sseData);
      observer.next(sseData);
    } else {
      this.logger.warn(`No active SSE stream found for analysis: ${analysisId}`);
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  private extractEffectiveDates(content: string, title: string): {
    effectiveDate?: Date;
    versionDate?: Date;
  } {
    const result: { effectiveDate?: Date; versionDate?: Date } = {};

    try {
      // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞—Ç –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è
      const effectivePatterns = [
        /–¥–µ–π—Å—Ç–≤—É–µ—Ç\s+—Å\s+(\d{1,2}[.\-\/]\d{1,2}[.\-\/]\d{2,4})/gi,
        /–≤—Å—Ç—É–ø–∞–µ—Ç\s+–≤\s+—Å–∏–ª—É\s+—Å\s+(\d{1,2}[.\-\/]\d{1,2}[.\-\/]\d{2,4})/gi,
        /–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è\s+—Å\s+(\d{1,2}[.\-\/]\d{1,2}[.\-\/]\d{2,4})/gi,
        /—Å\s+(\d{1,2}[.\-\/]\d{1,2}[.\-\/]\d{2,4})\s+–≥–æ–¥–∞?\s+–¥–µ–π—Å—Ç–≤—É–µ—Ç/gi,
      ];

      // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤–µ—Ä—Å–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      const versionPatterns = [
        /–≤–µ—Ä—Å–∏—è\s+–æ—Ç\s+(\d{1,2}[.\-\/]\d{1,2}[.\-\/]\d{2,4})/gi,
        /—Ä–µ–¥–∞–∫—Ü–∏—è\s+–æ—Ç\s+(\d{1,2}[.\-\/]\d{1,2}[.\-\/]\d{2,4})/gi,
        /—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ\s+(\d{1,2}[.\-\/]\d{1,2}[.\-\/]\d{2,4})/gi,
      ];

      // –ò—â–µ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
      const searchText = `${title} ${content}`;

      // –ü–æ–∏—Å–∫ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è
      for (const pattern of effectivePatterns) {
        const matches = searchText.match(pattern);
        if (matches && matches.length > 0) {
          const dateStr = matches[0].match(/(\d{1,2}[.\-\/]\d{1,2}[.\-\/]\d{2,4})/);
          if (dateStr) {
            const parsedDate = this.parseDate(dateStr[0]);
            if (parsedDate) {
              result.effectiveDate = parsedDate;
              break;
            }
          }
        }
      }

      // –ü–æ–∏—Å–∫ –¥–∞—Ç—ã –≤–µ—Ä—Å–∏–∏
      for (const pattern of versionPatterns) {
        const matches = searchText.match(pattern);
        if (matches && matches.length > 0) {
          const dateStr = matches[0].match(/(\d{1,2}[.\-\/]\d{1,2}[.\-\/]\d{2,4})/);
          if (dateStr) {
            const parsedDate = this.parseDate(dateStr[0]);
            if (parsedDate) {
              result.versionDate = parsedDate;
              break;
            }
          }
        }
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–æ –µ—Å—Ç—å –¥–∞—Ç–∞ –≤–µ—Ä—Å–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
      if (!result.effectiveDate && result.versionDate) {
        result.effectiveDate = result.versionDate;
      }

    } catch (error) {
      this.logger.warn('Error extracting effective dates:', error);
    }

    return result;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
   */
  private parseDate(dateStr: string): Date | null {
    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
      const normalized = dateStr.replace(/[-\/]/g, '.');
      const parts = normalized.split('.');
      
      if (parts.length === 3) {
        let day = parseInt(parts[0]);
        let month = parseInt(parts[1]);
        let year = parseInt(parts[2]);
        
        // –ï—Å–ª–∏ –≥–æ–¥ –¥–≤—É–∑–Ω–∞—á–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º 2000
        if (year < 100) {
          year += 2000;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        if (day >= 1 && day <= 31 && month >= 1 && month <= 12 && year >= 1900 && year <= 2100) {
          return new Date(year, month - 1, day);
        }
      }
    } catch (error) {
      this.logger.warn(`Error parsing date: ${dateStr}`, error);
    }
    
    return null;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫ –∫–æ–º–ø–∞–Ω–∏–∏
   */
  private analyzeCompanyBelonging(content: string, title: string, currentCompany: string): {
    isCorrect: boolean;
    suggestedCompany?: string;
    confidence: number;
    reason: string;
  } {
    const companyKeywords = {
      'SOGAZ': ['—Å–æ–≥–∞–∑', '—Å–æ–≥–∞–∑', '–°–û–ì–ê–ó', 'sogaz', 'Sogaz'],
      'INGOSSTRAH': ['–∏–Ω–≥–æ—Å—Å—Ç—Ä–∞—Ö', '–∏–Ω–≥–æ—Å', 'ingosstrah', 'Ingosstrah', '–ò–Ω–≥–æ—Å—Å—Ç—Ä–∞—Ö'],
      'RESOGARANTIA': ['—Ä–µ—Å–æ', '–≥–∞—Ä–∞–Ω—Ç–∏—è', '—Ä–µ—Å–æ-–≥–∞—Ä–∞–Ω—Ç–∏—è', 'resogarantia', 'ResoGarantia', '–†–µ—Å–æ-–ì–∞—Ä–∞–Ω—Ç–∏—è'],
      'VSK': ['–≤—Å–∫', '–í–°–ö', 'vsk', 'VSK'],
      'ROSGOSSTRAH': ['—Ä–æ—Å–≥–æ—Å—Å—Ç—Ä–∞—Ö', '—Ä–æ—Å–≥–æ—Å', 'rosgosstrah', 'Rosgosstrah', '–†–æ—Å–≥–æ—Å—Å—Ç—Ä–∞—Ö'],
      'TINKOFF': ['—Ç–∏–Ω—å–∫–æ—Ñ—Ñ', 'tinkoff', 'Tinkoff', '–¢–∏–Ω—å–∫–æ—Ñ—Ñ'],
      'SBERBANK': ['—Å–±–µ—Ä–±–∞–Ω–∫', '—Å–±–µ—Ä', 'sberbank', 'Sberbank', '–°–±–µ—Ä–±–∞–Ω–∫'],
      'ALFA': ['–∞–ª—å—Ñ–∞', '–∞–ª—å—Ñ–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', 'alfa', 'Alfa', '–ê–ª—å—Ñ–∞–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ'],
      'GENERAL': ['–æ–±—â–∏–µ', '–ø—Ä–∞–≤–∏–ª–∞', '–Ω–æ—Ä–º—ã', '–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π', '–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π']
    };

    const contentLower = content.toLowerCase();
    const titleLower = title.toLowerCase();
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    const companyMentions: { [key: string]: number } = {};
    
    for (const [company, keywords] of Object.entries(companyKeywords)) {
      let mentions = 0;
      for (const keyword of keywords) {
        const contentMatches = (contentLower.match(new RegExp(keyword.toLowerCase(), 'g')) || []).length;
        const titleMatches = (titleLower.match(new RegExp(keyword.toLowerCase(), 'g')) || []).length;
        mentions += contentMatches + titleMatches * 2; // –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∂–Ω–µ–µ
      }
      companyMentions[company] = mentions;
    }

    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–ø–∞–Ω–∏—é —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    const bestMatch = Object.entries(companyMentions)
      .filter(([_, count]) => count > 0)
      .sort(([, a], [, b]) => b - a)[0];

    if (!bestMatch) {
      return {
        isCorrect: currentCompany === 'GENERAL',
        suggestedCompany: 'GENERAL',
        confidence: 0.3,
        reason: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π'
      };
    }

    const [suggestedCompany, mentions] = bestMatch;
    const confidence = Math.min(0.9, mentions * 0.2);
    
    if (suggestedCompany === currentCompany) {
      return {
        isCorrect: true,
        confidence: confidence,
        reason: `–ù–∞–π–¥–µ–Ω–æ ${mentions} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ "${suggestedCompany}"`
      };
    } else {
      return {
        isCorrect: false,
        suggestedCompany: suggestedCompany,
        confidence: confidence,
        reason: `–ù–∞–π–¥–µ–Ω–æ ${mentions} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π "${suggestedCompany}", —Ç–µ–∫—É—â–∞—è: "${currentCompany}"`
      };
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  private analyzeTitleCorrectness(content: string, currentTitle: string, companyCode: string, productCode: string): {
    isCorrect: boolean;
    suggestedTitle?: string;
    confidence: number;
    reason: string;
  } {
    const titleLower = currentTitle.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    const productKeywords = {
      'OSAGO': ['–æ—Å–∞–≥–æ', '–∞–≤—Ç–æ–≥—Ä–∞–∂–¥–∞–Ω–∫–∞', '–∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–∞–≤—Ç–æ–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∞—è'],
      'KASKO': ['–∫–∞—Å–∫–æ', '–¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ', '–∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å'],
      'MORTGAGE': ['–∏–ø–æ—Ç–µ–∫–∞', '–∏–ø–æ—Ç–µ—á–Ω–æ–µ', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–∫–≤–∞—Ä—Ç–∏—Ä–∞'],
      'LIFE': ['–∂–∏–∑–Ω—å', '–∂–∏–∑–Ω–µ–Ω–Ω–æ–µ', '—Å–º–µ—Ä—Ç—å', '–∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å'],
      'HEALTH': ['–∑–¥–æ—Ä–æ–≤—å–µ', '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ', '–¥–º—Å', '–ª–µ—á–µ–Ω–∏–µ'],
      'TRAVEL': ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '—Ç—É—Ä–∏–∑–º', '–≤—ã–µ–∑–¥', '–∑–∞–≥—Ä–∞–Ω–∏—Ü–∞'],
      'PROPERTY': ['–∏–º—É—â–µ—Å—Ç–≤–æ', '–¥–æ–º', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å'],
      'LIABILITY': ['–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '—É—â–µ—Ä–±', '–≤—Ä–µ–¥'],
      'COMPANY_INFO': ['–∫–æ–º–ø–∞–Ω–∏—è', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–æ –∫–æ–º–ø–∞–Ω–∏–∏', '—É—Å–ª—É–≥–∏'],
      'PRICING': ['—Ç–∞—Ä–∏—Ñ—ã', '—Ü–µ–Ω—ã', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ä–∞—Å—Ü–µ–Ω–∫–∏'],
      'GENERAL': ['–ø—Ä–∞–≤–∏–ª–∞', '—É—Å–ª–æ–≤–∏—è', '–æ–±—â–∏–µ', '–Ω–æ—Ä–º—ã']
    };

    const productKeywordsForCurrent = productKeywords[productCode] || [];
    const hasProductKeywords = productKeywordsForCurrent.some(keyword => 
      titleLower.includes(keyword.toLowerCase())
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏
    const companyKeywords = {
      'SOGAZ': ['—Å–æ–≥–∞–∑'],
      'INGOSSTRAH': ['–∏–Ω–≥–æ—Å—Å—Ç—Ä–∞—Ö', '–∏–Ω–≥–æ—Å'],
      'RESOGARANTIA': ['—Ä–µ—Å–æ', '–≥–∞—Ä–∞–Ω—Ç–∏—è'],
      'VSK': ['–≤—Å–∫'],
      'ROSGOSSTRAH': ['—Ä–æ—Å–≥–æ—Å—Å—Ç—Ä–∞—Ö', '—Ä–æ—Å–≥–æ—Å'],
      'TINKOFF': ['—Ç–∏–Ω—å–∫–æ—Ñ—Ñ'],
      'SBERBANK': ['—Å–±–µ—Ä–±–∞–Ω–∫', '—Å–±–µ—Ä'],
      'ALFA': ['–∞–ª—å—Ñ–∞'],
      'GENERAL': ['–æ–±—â–∏–µ', '–ø—Ä–∞–≤–∏–ª–∞', '–Ω–æ—Ä–º—ã']
    };

    const companyKeywordsForCurrent = companyKeywords[companyCode] || [];
    const hasCompanyKeywords = companyKeywordsForCurrent.some(keyword => 
      titleLower.includes(keyword.toLowerCase())
    );

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    let suggestedTitle = currentTitle;
    
    if (!hasProductKeywords && productKeywordsForCurrent.length > 0) {
      const productKeyword = productKeywordsForCurrent[0];
      suggestedTitle = `${productKeyword.charAt(0).toUpperCase() + productKeyword.slice(1)} - ${currentTitle}`;
    }
    
    if (!hasCompanyKeywords && companyKeywordsForCurrent.length > 0 && companyCode !== 'GENERAL') {
      const companyKeyword = companyKeywordsForCurrent[0];
      suggestedTitle = `${companyKeyword.charAt(0).toUpperCase() + companyKeyword.slice(1)} ${suggestedTitle}`;
    }

    const issues: string[] = [];
    if (!hasProductKeywords) {
      issues.push('–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞');
    }
    if (!hasCompanyKeywords && companyCode !== 'GENERAL') {
      issues.push('–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏');
    }

    const isCorrect = issues.length === 0;
    const confidence = isCorrect ? 0.9 : 0.6;

    return {
      isCorrect: isCorrect,
      suggestedTitle: suggestedTitle !== currentTitle ? suggestedTitle : undefined,
      confidence: confidence,
      reason: issues.length > 0 ? issues.join(', ') : '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é'
    };
  }
}
