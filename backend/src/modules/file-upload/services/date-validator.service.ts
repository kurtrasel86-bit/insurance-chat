import { Injectable, Logger } from '@nestjs/common';

export interface DateValidationResult {
  isValid: boolean;
  foundDates: Array<{
    date: string;
    context: string;
    type: 'expiry' | 'effective' | 'version' | 'general';
    isExpired: boolean;
    daysUntilExpiry?: number;
  }>;
  warnings: string[];
  recommendations: string[];
}

@Injectable()
export class DateValidatorService {
  private readonly logger = new Logger(DateValidatorService.name);

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
   */
  async validateDocumentDates(params: {
    title: string;
    content: string;
    filename?: string;
  }): Promise<DateValidationResult> {
    const result: DateValidationResult = {
      isValid: true,
      foundDates: [],
      warnings: [],
      recommendations: [],
    };

    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      const extractedDates = this.extractDatesFromText(params.content, params.title);
      
      const currentDate = new Date();
      
      for (const dateInfo of extractedDates) {
        const parsedDate = this.parseDate(dateInfo.date);
        
        if (parsedDate) {
          const daysUntilExpiry = Math.ceil((parsedDate.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24));
          const isExpired = parsedDate < currentDate;
          
          result.foundDates.push({
            date: dateInfo.date,
            context: dateInfo.context,
            type: dateInfo.type,
            isExpired,
            daysUntilExpiry: isExpired ? undefined : daysUntilExpiry,
          });

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –¥–∞—Ç—ã
          if (dateInfo.type === 'expiry' || dateInfo.type === 'effective') {
            if (isExpired) {
              result.isValid = false;
              result.warnings.push(
                `‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ç–µ–∫—à—É—é –¥–∞—Ç—É: ${dateInfo.date} (${dateInfo.context})`
              );
            } else if (daysUntilExpiry <= 30) {
              result.warnings.push(
                `‚è∞ –î–æ–∫—É–º–µ–Ω—Ç —Å–∫–æ—Ä–æ –ø–æ—Ç–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å: ${dateInfo.date} (—á–µ—Ä–µ–∑ ${daysUntilExpiry} –¥–Ω–µ–π)`
              );
            }
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
          if (dateInfo.type === 'version') {
            const monthsOld = (currentDate.getTime() - parsedDate.getTime()) / (1000 * 60 * 60 * 24 * 30);
            if (monthsOld > 12) {
              result.warnings.push(
                `üìÖ –í–µ—Ä—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ä—à–µ –≥–æ–¥–∞: ${dateInfo.date} (${Math.round(monthsOld)} –º–µ—Å—è—Ü–µ–≤)`
              );
            }
          }
        }
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      this.generateRecommendations(result);

      this.logger.log(`Date validation completed: ${result.foundDates.length} dates found, ${result.warnings.length} warnings`);

    } catch (error) {
      this.logger.error('Error validating document dates:', error);
      result.warnings.push('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ');
    }

    return result;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  private extractDatesFromText(content: string, title?: string): Array<{
    date: string;
    context: string;
    type: 'expiry' | 'effective' | 'version' | 'general';
  }> {
    const dates: Array<{
      date: string;
      context: string;
      type: 'expiry' | 'effective' | 'version' | 'general';
    }> = [];

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞—Ç
    const datePatterns = [
      // –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥–≥–≥
      {
        pattern: /(\d{1,2})\.(\d{1,2})\.(\d{4})/g,
        format: 'dd.mm.yyyy'
      },
      // –§–æ—Ä–º–∞—Ç: –¥–¥/–º–º/–≥–≥–≥–≥
      {
        pattern: /(\d{1,2})\/(\d{1,2})\/(\d{4})/g,
        format: 'dd/mm/yyyy'
      },
      // –§–æ—Ä–º–∞—Ç: –≥–≥–≥–≥-–º–º-–¥–¥
      {
        pattern: /(\d{4})-(\d{1,2})-(\d{1,2})/g,
        format: 'yyyy-mm-dd'
      },
      // –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: "1 —è–Ω–≤–∞—Ä—è 2024"
      {
        pattern: /(\d{1,2})\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s+(\d{4})/gi,
        format: 'dd month yyyy'
      }
    ];

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–∞—Ç—ã
    const contextPatterns = {
      expiry: [
        /–¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ/i,
        /—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è/i,
        /–∏—Å—Ç–µ–∫–∞–µ—Ç/i,
        /–ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ/i,
        /—É—Ç—Ä–∞—á–∏–≤–∞–µ—Ç —Å–∏–ª—É/i,
        /–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ/i
      ],
      effective: [
        /–≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É/i,
        /–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å/i,
        /–Ω–∞—á–∏–Ω–∞–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å/i,
        /–≤–≤–µ–¥–µ–Ω–æ –≤ –¥–µ–π—Å—Ç–≤–∏–µ/i,
        /–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Å/i
      ],
      version: [
        /–≤–µ—Ä—Å–∏—è –æ—Ç/i,
        /—Ä–µ–¥–∞–∫—Ü–∏—è –æ—Ç/i,
        /—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ/i,
        /–ø—Ä–∏–Ω—è—Ç–æ/i,
        /–∏–∑–¥–∞–Ω–∏–µ/i
      ]
    };

    const textToSearch = title ? `${title} ${content}` : content;

    for (const { pattern, format } of datePatterns) {
      let match;
      while ((match = pattern.exec(textToSearch)) !== null) {
        const fullMatch = match[0];
        const matchIndex = match.index;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –¥–∞—Ç—ã (50 —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ)
        const contextStart = Math.max(0, matchIndex - 50);
        const contextEnd = Math.min(textToSearch.length, matchIndex + fullMatch.length + 50);
        const context = textToSearch.substring(contextStart, contextEnd).trim();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞—Ç—ã –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        let dateType: 'expiry' | 'effective' | 'version' | 'general' = 'general';
        
        for (const [type, patterns] of Object.entries(contextPatterns)) {
          if (patterns.some(p => p.test(context))) {
            dateType = type as any;
            break;
          }
        }

        dates.push({
          date: fullMatch,
          context,
          type: dateType,
        });
      }
    }

    return dates;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç Date
   */
  private parseDate(dateStr: string): Date | null {
    try {
      // –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥–≥–≥
      const ddmmyyyy = dateStr.match(/(\d{1,2})\.(\d{1,2})\.(\d{4})/);
      if (ddmmyyyy) {
        const [, day, month, year] = ddmmyyyy;
        return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
      }

      // –§–æ—Ä–º–∞—Ç: –¥–¥/–º–º/–≥–≥–≥–≥
      const ddmmyyyy2 = dateStr.match(/(\d{1,2})\/(\d{1,2})\/(\d{4})/);
      if (ddmmyyyy2) {
        const [, day, month, year] = ddmmyyyy2;
        return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
      }

      // –§–æ—Ä–º–∞—Ç: –≥–≥–≥–≥-–º–º-–¥–¥
      const yyyymmdd = dateStr.match(/(\d{4})-(\d{1,2})-(\d{1,2})/);
      if (yyyymmdd) {
        const [, year, month, day] = yyyymmdd;
        return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
      }

      // –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
      const textDate = dateStr.match(/(\d{1,2})\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s+(\d{4})/i);
      if (textDate) {
        const [, day, monthName, year] = textDate;
        const monthNames = {
          '—è–Ω–≤–∞—Ä—è': 0, '—Ñ–µ–≤—Ä–∞–ª—è': 1, '–º–∞—Ä—Ç–∞': 2, '–∞–ø—Ä–µ–ª—è': 3,
          '–º–∞—è': 4, '–∏—é–Ω—è': 5, '–∏—é–ª—è': 6, '–∞–≤–≥—É—Å—Ç–∞': 7,
          '—Å–µ–Ω—Ç—è–±—Ä—è': 8, '–æ–∫—Ç—è–±—Ä—è': 9, '–Ω–æ—è–±—Ä—è': 10, '–¥–µ–∫–∞–±—Ä—è': 11
        };
        const month = monthNames[monthName.toLowerCase() as keyof typeof monthNames];
        if (month !== undefined) {
          return new Date(parseInt(year), month, parseInt(day));
        }
      }

      return null;
    } catch (error) {
      return null;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  private generateRecommendations(result: DateValidationResult): void {
    if (result.foundDates.length === 0) {
      result.recommendations.push('üìÖ –í –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä—É—á–Ω—É—é.');
      return;
    }

    const expiredDates = result.foundDates.filter(d => d.isExpired);
    const soonToExpire = result.foundDates.filter(d => !d.isExpired && d.daysUntilExpiry && d.daysUntilExpiry <= 90);

    if (expiredDates.length > 0) {
      result.recommendations.push('üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞.');
    }

    if (soonToExpire.length > 0) {
      result.recommendations.push('‚è∞ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞—Ç—ã —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫—É—Ç.');
    }

    const versionDates = result.foundDates.filter(d => d.type === 'version');
    if (versionDates.length > 0) {
      result.recommendations.push('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –≤—ã—à–ª–∞ –ª–∏ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ.');
    }
  }
}
