const API_BASE = 'http://localhost:3000';

async function testUrlDocuments() {
  console.log('üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ URL...\n');

  try {
    // –¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ URL
    console.log('üìÑ –¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞');
    const pdfResponse = await fetch(`${API_BASE}/url-documents/process`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        url: 'https://reso.ru/upload/iblock/123/1234567890.pdf', // –ü—Ä–∏–º–µ—Ä URL
        companyCode: 'RESO',
        productCode: 'AUTO',
        documentType: 'rules'
      })
    });

    if (pdfResponse.ok) {
      const pdfData = await pdfResponse.json();
      console.log('‚úÖ PDF –¥–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', pdfData.data.title);
      console.log(`   –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${pdfData.data.duplicatesCount}`);
      console.log(`   –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: ${pdfData.data.conflictsCount}`);
      console.log(`   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ –¥–∞—Ç–∞–º: ${pdfData.data.dateWarningsCount}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF:', await pdfResponse.text());
    }

    console.log('\n' + '='.repeat(50) + '\n');

    // –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    console.log('üåê –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
    const htmlResponse = await fetch(`${API_BASE}/url-documents/process`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        url: 'https://reso.ru/about/news/', // –ü—Ä–∏–º–µ—Ä URL
        companyCode: 'RESO',
        productCode: 'GENERAL',
        documentType: 'news'
      })
    });

    if (htmlResponse.ok) {
      const htmlData = await htmlResponse.json();
      console.log('‚úÖ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:', htmlData.data.title);
      console.log(`   –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${htmlData.data.duplicatesCount}`);
      console.log(`   –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: ${htmlData.data.conflictsCount}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTML:', await htmlResponse.text());
    }

    console.log('\n' + '='.repeat(50) + '\n');

    // –¢–µ—Å—Ç 3: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    console.log('üìã –¢–µ—Å—Ç 3: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
    const listResponse = await fetch(`${API_BASE}/url-documents`);
    
    if (listResponse.ok) {
      const listData = await listResponse.json();
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${listData.data.length}`);
      listData.data.forEach((doc, index) => {
        console.log(`   ${index + 1}. ${doc.title} (${doc.companyCode}/${doc.productCode})`);
        console.log(`      URL: ${doc.url}`);
        console.log(`      –°—Ç–∞—Ç—É—Å: ${doc.status}`);
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞:', await listResponse.text());
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testUrlDocuments();
