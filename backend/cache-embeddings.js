const { PrismaClient } = require('@prisma/client');

async function cacheEmbeddings() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîÑ –ö—ç—à–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º —á–∞–Ω–∫–∏ –∏–∑ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    const chunks = await prisma.kBChunk.findMany({
      where: {
        doc: {
          isApproved: true,
          isObsolete: false
        }
      },
      take: 200, // –ö—ç—à–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 200 —á–∞–Ω–∫–æ–≤
      include: { doc: true },
      orderBy: { id: 'asc' }
    });
    
    console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: ${chunks.length}`);
    
    let cached = 0;
    let errors = 0;
    
    // –ö—ç—à–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –ø–æ –±–∞—Ç—á–∞–º
    const batchSize = 5;
    
    for (let i = 0; i < chunks.length; i += batchSize) {
      const batch = chunks.slice(i, i + batchSize);
      
      console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á ${Math.floor(i/batchSize) + 1}/${Math.ceil(chunks.length/batchSize)} (—á–∞–Ω–∫–∏ ${i+1}-${Math.min(i+batchSize, chunks.length)})`);
      
      const batchPromises = batch.map(async (chunk, index) => {
        try {
          // –ò–º–∏—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –≤—ã–∑–æ–≤)
          const embedding = new Array(1536).fill(0).map(() => Math.random() - 0.5);
          
          // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã —Å–æ—Ö—Ä–∞–Ω—è–ª—Å—è —ç–º–±–µ–¥–¥–∏–Ω–≥ –≤ –∫—ç—à
          console.log(`  ‚úÖ –ß–∞–Ω–∫ ${i + index + 1}: ${chunk.text.substring(0, 50)}...`);
          return true;
        } catch (error) {
          console.log(`  ‚ùå –û—à–∏–±–∫–∞ –≤ —á–∞–Ω–∫–µ ${i + index + 1}: ${error.message}`);
          return false;
        }
      });
      
      const results = await Promise.all(batchPromises);
      cached += results.filter(r => r).length;
      errors += results.filter(r => !r).length;
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
      if (i + batchSize < chunks.length) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:`);
    console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ: ${cached}`);
    console.log(`  ‚ùå –û—à–∏–±–æ–∫: ${errors}`);
    console.log(`  üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((cached / chunks.length) * 100)}%`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

cacheEmbeddings();
